env:
  - distro: debianjessie
    init: "/sbin/init"
    run_opts: ""
    playbook: test.yml
    redis_daemon: redis-server
  - distro: ubuntutrusty
    init: "/sbin/init"
    run_opts: ""
    playbook: test.yml
    redis_daemon: redis-server
  - distro: ubuntuxenial
    init: "/sbin/init"
    run_opts: ""
    playbook: test.yml
    redis_daemon: redis-server

services:
  - docker

before_install:
  - docker pull jebovic/${distro}-ansible:latest

script:
  # run container
  - container_id=$(mktemp)
  - docker run --detach --privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro -p 80:80 -p 443:443 -p 8888:8888 --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} jebovic/${distro}-ansible:latest "${init}" > "${container_id}"
  # syntax checking
  - docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook} --syntax-check
  # test role
  - docker exec "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook}
  # test role idempotence
  - idempotence=$(mktemp)
  - docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook} | tee -a ${idempotence}
  - >
    tail ${idempotence}
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)
  # test role tasks
  - docker exec --tty "$(cat ${container_id})" env TERM=xterm systemctl --no-pager status ${redis_daemon}
  - docker exec --tty "$(cat ${container_id})" env TERM=xterm systemctl --no-pager stop ${redis_daemon}
  - docker exec --tty "$(cat ${container_id})" env TERM=xterm systemctl --no-pager start ${redis_daemon}

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
  slack:
    secure: bWHNsq939kpnc8UwN2mPJjLUlBzeSX7UMRCyNPrmPiBREIyIKsrLfwFQz30CPDWqTRc887BTcQvMvIQO7MBqpMQ4F0xaasegRp5L4ZBqNRb/j51M/2IbHd02fO90oC5/u0aSE03QQNJLvO7iA6KVrXhi1ln1g5t1J1FeP6/g1s1I3qLzqJsSjuazZDe1gQMYW1/m8eXiBaU+3TEqvEW0JqwOfaJ73tOWMdNaR24A0PKE6WPGwT2egLwUKN3jiPvUEpC8QBk8PZrkB7mNpDnWaCAtgHzuTKA62pV7VN+ECeK27x0CuReYXHE57KJTYlimcbr3MRbjUBuD70Lon0WRWuC5h6Bg2eQhhBsRfVjGAE65tlVvd2xRga0gLwgEEGALdHYNGaGi1YChmxNaqG3f/gkm1NaoddIndz5XyoXjHfXXdGjCQ582VvQhGOLQlz3fv/i/woeiYX43ZzGV0Z9b17WUlx7u3VezjWMxhdMWh805vV9yAfnc0OKzbUKQshl1FJzzW8hRojCxq0i/OvbqJsLFyJ2kIFh9FowDu+AW+ituOj9XUuSgRUBNk++7m7fHZti+/UFR5hpVljAg9/7pnlYFX7qGIGJ+G949ZGz8kniAVwX/zjQPSQEMeaXlQ4vKu/ReZIA6zuA9Fey7CntvCZ6K+t+la0AIbmUcHVMO46o=
